{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lukas-Strandberg/Smask_Lektioner/blob/Google_colab/Lektion_04\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "tags": [],
        "id": "LMl1S3XiLRSX"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import sklearn.preprocessing as skl_pre\n",
        "import sklearn.linear_model as skl_lm\n",
        "import sklearn.discriminant_analysis as skl_da\n",
        "import sklearn.neighbors as skl_nb\n",
        "\n",
        "#from IPython.display import set_matplotlib_formats\n",
        "#set_matplotlib_formats('png')\n",
        "from IPython.core.pylabtools import figsize\n",
        "figsize(10, 6) # Width and hight\n",
        "#plt.style.use('seaborn-white')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "BzUl1gzwLRSZ"
      },
      "source": [
        "# 4.1 Getting started with classification – Breast cancer diagnosis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "b0RA8eK6LRSa"
      },
      "source": [
        "In this exercise, we will consider the data set `data/biopsy.csv` with data from breast biopsies, for the purpose of diagnosing breast cancer. For each patient, the data set contains nine different attributes (clump thickness, uniformity of cell size, uniformity of cell shape, marginal adhesion, single epithelial cell size, bare nuclei, bland chromatin, normal nucleoli and mitoses) scored on a scale from $1$ to $10$, as well as the physician’s diagnosis (malign or benign)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "eDpy1tVcLRSb"
      },
      "source": [
        "## Dataset\n",
        "This data frame `biopsy` contains the following columns:  \n",
        "`ID`: sample code number (not unique).  \n",
        "`V1`: clump thickness.  \n",
        "`V2`: uniformity of cell size.  \n",
        "`V3`: uniformity of cell shape.  \n",
        "`V4`: marginal adhesion.  \n",
        "`V5`: single epithelial cell size.  \n",
        "`V6`: bare nuclei (16 values are missing).  \n",
        "`V7`: bland chromatin.  \n",
        "`V8`: normal nucleoli.  \n",
        "`V9`: mitoses.  \n",
        "`class`: \"benign\" or \"malignant\".  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "cgAtvlSwLRSb"
      },
      "source": [
        "## a)\n",
        "Load and familiarize yourself with the data set, using, e.g.`info()`, `describe()`, `pandas.plotting.scatter_matrix()` and `print()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "tags": [],
        "id": "O18t_JecLRSc"
      },
      "outputs": [],
      "source": [
        "# url = 'data/biopsy.csv'\n",
        "url = 'https://uu-sml.github.io/course-sml-public/data/biopsy.csv'\n",
        "biopsy = pd.read_csv(url, na_values='?', dtype={'ID': str}).dropna().reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "biopsy.info()"
      ],
      "metadata": {
        "id": "UgdneDtAL7WD",
        "outputId": "36e70b06-359b-4c0c-9ff1-c4189f5ec674",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 683 entries, 0 to 682\n",
            "Data columns (total 12 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   index   683 non-null    int64  \n",
            " 1   ID      683 non-null    object \n",
            " 2   V1      683 non-null    int64  \n",
            " 3   V2      683 non-null    int64  \n",
            " 4   V3      683 non-null    int64  \n",
            " 5   V4      683 non-null    int64  \n",
            " 6   V5      683 non-null    int64  \n",
            " 7   V6      683 non-null    float64\n",
            " 8   V7      683 non-null    int64  \n",
            " 9   V8      683 non-null    int64  \n",
            " 10  V9      683 non-null    int64  \n",
            " 11  class   683 non-null    object \n",
            "dtypes: float64(1), int64(9), object(2)\n",
            "memory usage: 64.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "8Dwv8_vcLRSc"
      },
      "source": [
        "## b)\n",
        "Split the data randomly into a training set and a test set of approximately similar size."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "tags": [],
        "id": "nTPiE3JFLRSd",
        "outputId": "88016eca-6137-488c-d64e-a9846665e2ec",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set size: 341\n",
            "Test set size: 342\n"
          ]
        }
      ],
      "source": [
        "np.random.seed(1)\n",
        "\n",
        "# Shuffle the dataset\n",
        "shuffled_indices = np.random.permutation(len(biopsy))\n",
        "\n",
        "# Compute split index\n",
        "split_idx = len(biopsy) // 2  # Roughly half\n",
        "\n",
        "# Split into training and test sets\n",
        "train_set = biopsy.iloc[shuffled_indices[:split_idx]].reset_index(drop=True)\n",
        "test_set = biopsy.iloc[shuffled_indices[split_idx:]].reset_index(drop=True)\n",
        "\n",
        "# Display the sizes of the splits\n",
        "print(f\"Training set size: {len(train_set)}\")\n",
        "print(f\"Test set size: {len(test_set)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "lgCx-9X_LRSd"
      },
      "source": [
        "## c) Logistic regression <a id='4.1-c'></a>\n",
        "Perform logistic regression with `class` as output variable and `V3`, `V4` and `V5` as input variables. Do a prediction on the test set, and compute (i) the fraction of correct predictions and (ii) the confusion matrix (using, for examnple, `pandas.crosstab()`). The commands `skl_lm.LogisticRegression()` and `model.predict()` are useful. Is the performance any good, and what does the confusion matrix tell you?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "tags": [],
        "id": "IbYaY8VPLRSe",
        "outputId": "b595f848-071e-4678-cb07-a0536a9af9b9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fraction of correct predictions: 0.9386\n",
            "Confusion Matrix:\n",
            "Predicted  benign  malignant\n",
            "Actual                      \n",
            "benign        216          9\n",
            "malignant      12        105\n"
          ]
        }
      ],
      "source": [
        "# Define input (features) and output (target) variables\n",
        "X_train = train_set[['V3', 'V4', 'V5']]\n",
        "y_train = train_set['class']\n",
        "\n",
        "X_test = test_set[['V3', 'V4', 'V5']]\n",
        "y_test = test_set['class']\n",
        "\n",
        "# Initialize and fit logistic regression model\n",
        "model_log = skl_lm.LogisticRegression()\n",
        "model_log.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred_log = model_log.predict(X_test)\n",
        "\n",
        "# Compute the fraction of correct predictions\n",
        "accuracy_log = np.mean(y_pred_log == y_test)\n",
        "print(f\"Fraction of correct predictions: {accuracy_log:.4f}\")\n",
        "\n",
        "# Compute the confusion matrix using pandas.crosstab\n",
        "confusion_matrix = pd.crosstab(y_test, y_pred_log, rownames=['Actual'], colnames=['Predicted'])\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "8GY4QZtYLRSe"
      },
      "source": [
        "## d) LDA\n",
        "Repeat [(c)](#4.1-c) using LDA. A useful command is `sklearn.discriminant_analysis.LinearDiscriminantAnalysis()`. `sklearn.discriminant_analysis` is imported as `skl_da`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "tags": [],
        "id": "0ih6zhfdLRSe",
        "outputId": "8b90d9f1-c037-45e9-cacb-791e22b3fd69",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fraction of correct predictions: 0.9240\n",
            "Confusion Matrix:\n",
            "Predicted  benign  malignant\n",
            "Actual                      \n",
            "benign        219          6\n",
            "malignant      20         97\n"
          ]
        }
      ],
      "source": [
        "# Initialize and fit LDA\n",
        "model_LDA = skl_da.LinearDiscriminantAnalysis()\n",
        "model_LDA.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred_LDA = model_LDA.predict(X_test)\n",
        "\n",
        "# Compute the fraction of correct predictions\n",
        "accuracy_LDA = np.mean(y_pred_LDA == y_test)\n",
        "print(f\"Fraction of correct predictions: {accuracy_LDA:.4f}\")\n",
        "\n",
        "# Compute the confusion matrix using pandas.crosstab\n",
        "confusion_matrix = pd.crosstab(y_test, y_pred_LDA, rownames=['Actual'], colnames=['Predicted'])\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "ASE-B7oILRSe"
      },
      "source": [
        "## e) QDA\n",
        "Repeat [(c)](#4.1-c) using QDA. A useful command is `sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "tags": [],
        "id": "jpRTrBk_LRSe",
        "outputId": "7ae94bae-1c9e-4e18-e469-4b73c2bd4a25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fraction of correct predictions: 0.9327\n",
            "Confusion Matrix:\n",
            "Predicted  benign  malignant\n",
            "Actual                      \n",
            "benign        212         13\n",
            "malignant      10        107\n"
          ]
        }
      ],
      "source": [
        "# Initialize and fit LDA\n",
        "model_QDA = skl_da.QuadraticDiscriminantAnalysis()\n",
        "model_QDA.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred_QDA = model_QDA.predict(X_test)\n",
        "\n",
        "# Compute the fraction of correct predictions\n",
        "accuracy_QDA = np.mean(y_pred_QDA == y_test)\n",
        "print(f\"Fraction of correct predictions: {accuracy_QDA:.4f}\")\n",
        "\n",
        "# Compute the confusion matrix using pandas.crosstab\n",
        "confusion_matrix = pd.crosstab(y_test, y_pred_QDA, rownames=['Actual'], colnames=['Predicted'])\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "zmqnP3U7LRSe"
      },
      "source": [
        "## f) KNN\n",
        "Repeat [(c)](#4.1-c) using $k$-NN (with $k = 1$). A useful commands is `sklearn.neighbors.KNeighborsClassifier()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "tags": [],
        "id": "Y9GIwduhLRSf",
        "outputId": "ea5c8343-8847-4caf-a271-3f4968e3b1d9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fraction of correct predictions: 0.9386\n",
            "Confusion Matrix:\n",
            "Predicted  benign  malignant\n",
            "Actual                      \n",
            "benign        215         10\n",
            "malignant      11        106\n"
          ]
        }
      ],
      "source": [
        "# Initialize and fit LDA\n",
        "model_kNN = skl_nb.KNeighborsClassifier(5)\n",
        "model_kNN.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred_kNN = model_kNN.predict(X_test)\n",
        "\n",
        "# Compute the fraction of correct predictions\n",
        "accuracy_kNN = np.mean(y_pred_kNN == y_test)\n",
        "print(f\"Fraction of correct predictions: {accuracy_kNN:.4f}\")\n",
        "\n",
        "# Compute the confusion matrix using pandas.crosstab\n",
        "confusion_matrix = pd.crosstab(y_test, y_pred_kNN, rownames=['Actual'], colnames=['Predicted'])\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "RVQcaKXkLRSf"
      },
      "source": [
        "## g) Try different values for KNN\n",
        "Use a `for`-loop to explore the performance of $k$-NN for different values of $k$, and plot the fraction of correct\n",
        "predictions as a function of $k$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "tags": [],
        "id": "Q0ULZGfKLRSf",
        "outputId": "aa8bb427-eb68-45c4-9006-c19baccb4bef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "K = range(1,101)\n",
        "accuracy_scores = []\n",
        "i = 0\n",
        "for k in K:\n",
        "    model_kNN = skl_nb.KNeighborsClassifier(n_neighbors=k)\n",
        "    model_kNN.fit(X_train, y_train)\n",
        "    y_pred_kNN = model_kNN.predict(X_test)\n",
        "    accuracy_scores.append(np.mean(y_pred_kNN == y_test))\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(K, accuracy_scores, linestyle='-', color='b', label='Accuracy')\n",
        "\n",
        "best_k = K[np.argmax(accuracy_scores)]\n",
        "best_accuracy = max(accuracy_scores)\n",
        "plt.scatter(best_k, best_accuracy, color='red', label=f'Best k={best_k} ({best_accuracy:.2f})', zorder=3)\n",
        "\n",
        "plt.xlabel('Number of Neighbors (k)')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('k-NN Accuracy for Different k Values')\n",
        "\n",
        "plt.xticks(range(0, 101, 10))\n",
        "plt.yticks(np.linspace(min(accuracy_scores), max(accuracy_scores), 5))\n",
        "\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "nSDniPtBLRSf"
      },
      "source": [
        "## h) ROC for logistic regression\n",
        "Use a `for`-loop to explore how the true and false positive rates in logistic regression are affected by different threshold values, and plot the result as a `ROC curve`. (see Figure 4.7 and Table 4.1 in the book)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "tags": [],
        "id": "vT6CMb0ULRSf",
        "outputId": "7e9af469-948d-424b-cae0-dbfee34918c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Get predicted probabilities for the positive class (malignant)\n",
        "y_prob_log = model_log.predict_proba(X_test)[:, 1]  # Probability of class = malignant\n",
        "\n",
        "# Define thresholds (evenly spaced from 0 to 1)\n",
        "thresholds = np.linspace(0, 1, 100)\n",
        "\n",
        "# Initialize lists for TPR (Recall) and FPR\n",
        "tpr_list = []\n",
        "fpr_list = []\n",
        "\n",
        "# Loop over thresholds to compute FPR and TPR\n",
        "for threshold in thresholds:\n",
        "    y_pred_threshold = (y_prob_log >= threshold).astype(int)  # Convert probabilities to class labels\n",
        "\n",
        "    # Compute confusion matrix values\n",
        "    TP = np.sum((y_pred_threshold == 1) & (y_test == 'malignant'))  # True Positives\n",
        "    TN = np.sum((y_pred_threshold == 0) & (y_test == 'benign'))  # True Negatives\n",
        "    FP = np.sum((y_pred_threshold == 1) & (y_test == 'benign'))  # False Positives\n",
        "    FN = np.sum((y_pred_threshold == 0) & (y_test == 'malignant'))  # False Negatives\n",
        "\n",
        "    # Compute TPR (Sensitivity) and FPR\n",
        "    TPR = TP / (TP + FN) if (TP + FN) > 0 else 0  # Recall\n",
        "    FPR = FP / (FP + TN) if (FP + TN) > 0 else 0  # Fall-out\n",
        "\n",
        "    # Store values\n",
        "    tpr_list.append(TPR)\n",
        "    fpr_list.append(FPR)\n",
        "\n",
        "# Plot ROC Curve\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr_list, tpr_list, color='blue', label='ROC Curve')\n",
        "plt.plot([0, 1], [0, 1], color='gray', linestyle='--', label='Random Classifier')  # Diagonal line\n",
        "plt.xlabel('False Positive Rate (FPR)')\n",
        "plt.ylabel('True Positive Rate (TPR)')\n",
        "plt.title('ROC Curve for Logistic Regression')\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "n6g4860yLRSf"
      },
      "source": [
        "## i)\n",
        "Try to find another set of inputs (perhaps by also considering transformations of the attributes) which gives a better result than you have achieved so far. You may also play with the threshold values. (“Better” is on purpose left vague. For this problem, the implications of a false negative (=`benign`) misclassification is probably more severe than a false positive (=`malignant`) misclassification.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "FF5LgTW4LRSf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "vZGvND2XLRSf"
      },
      "source": [
        "# 4.2 Decision boundaries\n",
        "The following code generates some data with $x_1$ and $x_2$ both in $[0, 10]$ and $y$ either $0$ or $1$, and plots the decision boundary for a logistic regression model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "FbJX6oPCLRSf"
      },
      "outputs": [],
      "source": [
        "# generate data\n",
        "np.random.seed(2)\n",
        "N = 100\n",
        "x1 = np.random.uniform(0, 10, N)\n",
        "x2 = np.random.uniform(0, 10, N)\n",
        "y = np.ones(N)\n",
        "y[x1<4] = 0\n",
        "y[x2<4] = 0\n",
        "X = pd.DataFrame({'x1': x1, 'x2': x2})\n",
        "\n",
        "# learn a logistic regression model\n",
        "model = skl_lm.LogisticRegression(solver='lbfgs')\n",
        "model.fit(X, y)\n",
        "\n",
        "# classify the points in the whole domain\n",
        "res = 0.01   # resolution of the squares\n",
        "xs1 = np.arange(0, 10 + res, res)\n",
        "xs2 = np.arange(0, 10 + res, res)\n",
        "xs1, xs2 = np.meshgrid(xs1, xs2)    # Creating the grid for all the data points\n",
        "X_all = pd.DataFrame({'x1': xs1.flatten(), 'x2': xs2.flatten()})\n",
        "prediction = model.predict(X_all)\n",
        "\n",
        "from matplotlib.colors import LinearSegmentedColormap\n",
        "mycmap = LinearSegmentedColormap.from_list('mycmap', ['skyblue', 'lightsalmon'])\n",
        "plt.imshow(prediction.reshape(xs1.shape[0],-1),\n",
        "           cmap=mycmap,\n",
        "           origin='lower',\n",
        "           extent=[0,10,0,10],\n",
        "           aspect='auto')\n",
        "\n",
        "# Plot of the data points and their label\n",
        "plt.scatter(x1, x2, c=y, cmap='bwr') # blue - white -red colormap\n",
        "\n",
        "plt.title('Logistic regression decision boundary')\n",
        "plt.xlim([0,10])\n",
        "plt.ylim([0,10])\n",
        "plt.xlabel('$x_1$')\n",
        "plt.ylabel('$x_2$')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "VaFFLL2-LRSg"
      },
      "source": [
        "## (a)\n",
        "Run the code and verify that it reproduces the figure, and make sure you understand the figure. What is the misclassification rate here?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "7ZPzCNSmLRSg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "J2ORFUaiLRSg"
      },
      "source": [
        "## (b)\n",
        "Modify the code to plot the decision boundary for a LDA classifier. What differences do you see? What is the misclassification rate?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "o8qXFQDCLRSg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "aI_c2DZgLRSg"
      },
      "source": [
        "## (c)\n",
        "Modify the code to plot the decision boundary for a QDA classifier. What differences do you see? What is the misclassification rate?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "xbvdKyPOLRSg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "-8dIhUvVLRSg"
      },
      "source": [
        "## (d)\n",
        "Modify the code to plot the decision boundary for a $k$-NN classifier. What differences do you see? What is the misclassification rate?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "Mjqi9dddLRSg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "qzcYaeptLRSg"
      },
      "source": [
        "## (e)\n",
        "What happens with the decision boundary for logistic regression if you include the term $x_1x_2$ as an input? What is the misclassification rate?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "TwVoSTGeLRSg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "AjGiq-a6LRSh"
      },
      "source": [
        "# 4.3 Why not linear regression?\n",
        "In this exercise, we explore why linear regression might not be well suited for classification problems."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "NcFkvQ0KLRSh"
      },
      "source": [
        "## (a)\n",
        "Construct and plot a data set as follows: Let $x_i$ be samples $x_i = i$ in a sequence from $i = 1$ to $i = 40$. Let $y_i = 0$ for all $i = 1 : 40$, except for $i = 34, 38, 39, 40$ where $y_i = 1$. Hence, $y$ belongs to either of two classes, $0$ and $1$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "bEzong4MLRSh"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "N8G26b0ILRSh"
      },
      "source": [
        "## (b)\n",
        "Now, the problem is to fit a model which is able to predict the output $y$ from the input $x$. Start with a linear regression model (command `skl_lm.LinearRegression()`), and simply threshold its predictions at 0.5 (the average of 0 and 1, the two classes). Plot the prediction. How good is the prediction?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "Vuqh299mLRSo"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "hI0QsxWlLRSo"
      },
      "source": [
        "## (c)\n",
        "Try instead logistic regression using `skl_lm.LogisticRegression()` command (set the parameter `C` to $1000$) and plot the prediction. How good is the prediction, and what advantages does logistic regression have over linear regression for this classification problem?  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "f_BAKqfoLRSo"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "utLZG-GuLRSp"
      },
      "source": [
        "# 4.4 k-NN\n",
        "In this exercise, we are going to explore an important user aspect of $k$-NN."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "ES5bLZiCLRSp"
      },
      "source": [
        "## (a)\n",
        "Make $200$ draws $x_1$ from a $\\mathcal{N}(0, 1^2)$ distribution, and $200$ draws $x_2$ from $\\mathcal{N}(0, 10^4)$. Also construct $y$ such that $y = 1$ if $x_1 \\cdot x_2$ is positive, and $0$ otherwise. Split the data set randomly into a test and a training data set (equally sized)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "RjocZ5FWLRSp"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "5lDCg4FnLRSp"
      },
      "source": [
        "## (b)\n",
        "Use $k$-NN (choose $k$ yourself) to predict the test output $y$ using $x_1$ and $x_2$ as inputs. How well do you perform?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "Rm4HeQhjLRSp"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "s_b_wfHfLRSp"
      },
      "source": [
        "## (c)\n",
        "Now replace $x_2$ with $200$ draws from $\\mathcal{N}(0, 1^2)$, and perform $k$-NN classification anew. How well do you perform this time? Explain the difference!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "fC4sR5ALLRSp"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "c8gBULKoLRSp"
      },
      "source": [
        "## (d)\n",
        "Explore how the `sklearn.preprocessing.scale()` function can help for such problems encountered in (b)!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "kFhlZUEuLRSp"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "E4C4lhz9LRSp"
      },
      "source": [
        "# 4.5 Multiclass classification\n",
        "In the course, we have focused on the classification problem for 2 classes. The methods can, however, be generalized to more than two classes. In `Python`, the commands `skl_da.LinearDiscriminantAnalysis()`, `skl_da.QuadraticDiscriminantAnalysis()` and `skl_nb.KNeighborsClassifier()` can all be used directly for multi-class problems as well, which we will do in this exercise."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "9YrH3s4NLRSp"
      },
      "source": [
        "## (a)\n",
        "Load and familiarize yourself with the data set `iris`, and split it randomly into a training and a test data set."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "JWN6fWDwLRSq"
      },
      "source": [
        "**Description**\n",
        "\n",
        "This famous (Fisher's or Anderson's) `iris` data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for $50$ flowers from each of $3$ species of iris. The species are Iris setosa, versicolor, and virginica.\n",
        "\n",
        "**Format**\n",
        "\n",
        "iris is a data frame with $150$ cases (rows) and $5$ variables (columns) named `Sepal.Length`, `Sepal.Width`, `Petal.Length`, `Petal.Width`, and `Species`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "9okczbDbLRSq"
      },
      "outputs": [],
      "source": [
        "# url = 'data/iris.csv'\n",
        "url = 'https://uu-sml.github.io/course-sml-public/data/iris.csv'\n",
        "iris = pd.read_csv(url)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "UW9jx3DCLRSq"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "tags": [],
        "id": "camgggmTLRSq"
      },
      "source": [
        "## (b)\n",
        "Use all inputs (`Sepal.Length`, `Sepal.Width`, `Petal.Length`, `Petal.Width`) to predict the output `Species` (`setosa`,\n",
        "`versicolor` and `virginica`) using LDA, QDA, and $k$-NN, respectively."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "0_Xr5rbsLRSq"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}